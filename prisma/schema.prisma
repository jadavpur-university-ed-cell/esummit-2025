// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  REFERRED_USER
  ADMIN
  SUPER_ADMIN
  CAMPUS_AMBASSADOR
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}

enum PaymentMethod {
  CARD
  NETBANKING
  UPI
}

enum MerchandiseType {
  SHIRT
  // CAP
}

model Notification {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)

  @@map("notifications")
}

model User {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  email             String             @unique
  name              String
  password          String?
  phone             String?            @unique
  college           String?
  year              String?
  branch            String?
  rollNo            String?
  role              Role?              @default(USER)
  image             String?
  emailVerified     Boolean?           @default(false)
  referralCode      String?
  payments          Payments[]         @relation("UserPayments")
  teamIDs           String[]           @db.ObjectId
  teams             Team[]             @relation(fields: [teamIDs], references: [id])
  shirtSize         String? // XS, S, M, L, XL, XXL
  merchandiseOrders MerchandiseOrder[]
  notifications     Notification[]
  accounts          Account[]

  @@map("user")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Team {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  memberIds String[] @db.ObjectId
  members   User[]   @relation(fields: [memberIds], references: [id])
}

model Payments {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  userId        String        @db.ObjectId
  user          User          @relation("UserPayments", fields: [userId], references: [id])
  amount        Float
  paymentDate   DateTime      @default(now())
  paymentMethod PaymentMethod
  transactionId String        @unique
  status        PaymentStatus
}

model MerchandiseOrder {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  orderId     String          @unique
  amount      Float
  currency    String          @default("INR")
  receipt     String?
  status      String          @default("created")
  paymentId   String?
  userId      String          @db.ObjectId
  user        User            @relation(fields: [userId], references: [id])
  merchandise MerchandiseType
  size        String
  couponUsed  Boolean         @default(false)
  couponCode  String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("merchandise_orders")
}
